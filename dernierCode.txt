#include "opencv2/objdetect.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"
#include <iostream>
#include <stdio.h>

using namespace std;
using namespace cv;

/* Function Headers */
void detectAndDisplay(Mat frame);

/* Global variables */
String face_cascade_name = "C:\opencv\install\etc\haarcascades\haarcascade_frontalface_alt.xml";
String upper_body_cascade_name = "C:\\opencv\\install\\etc\\haarcascades\\haarcascade_upperbody.xml";
CascadeClassifier face_cascade;
CascadeClassifier upper_body_cascade;
String window_name = "Myvideo";

/* @function main */
int main(int argc, char* argv[])
{
	VideoCapture capture(0);
	Mat frame;
	//-- 1. Load the cascades
	//if (!face_cascade.load(face_cascade_name)) { printf("--(!)Error loading face cascade\n"); return -1; };
	if (!upper_body_cascade.load(upper_body_cascade_name)) { printf("--(!)Error loading body cascade\n"); return -1; };
	//-- 2. Read the video stream
	if (!capture.isOpened())  // if not success, exit program
	{
		cout << "Cannot open the video cam" << endl;
		return -1;
	}

	namedWindow(window_name, CV_WINDOW_AUTOSIZE); //create a window called "MyVideo"

	while (1)
	{
		bool bSuccess = capture.read(frame); // read a new frame from video

		if (!bSuccess) //if not success, break loop
		{
			cout << "Cannot read a frame from video stream" << endl;
			break;
		}

		//-- 3. Apply the classifier to the frame
		detectAndDisplay(frame);

		if (waitKey(30) == 27) //wait for 'esc' key press for 30ms. If 'esc' key is pressed, break loop
		{
			cout << "esc key is pressed by user" << endl;
			break;
		}
	}
	return 0;
}
/* @function detectAndDisplay */
void detectAndDisplay(Mat frame)
{
	/*std::vector<Rect> faces;
	Mat frame_gray;
	cvtColor(frame, frame_gray, COLOR_BGR2GRAY);
	equalizeHist(frame_gray, frame_gray);
	//-- Detect faces
	face_cascade.detectMultiScale(frame_gray, faces, 1.1, 2, 0 | CASCADE_SCALE_IMAGE, Size(30, 30));
	for (size_t i = 0; i < faces.size(); i++)
	{
		Point center(faces[i].x + faces[i].width / 2, faces[i].y + faces[i].height / 2);
		ellipse(frame, center, Size(faces[i].width / 2, faces[i].height / 2), 0, 0, 360, Scalar(255, 0, 255), 4, 8, 0);
	}
	//-- Show what you got
	imshow(window_name, frame);*/
	std::vector<Rect> bodies;
	Mat frame_gray;

	cvtColor(frame, frame_gray, CV_BGR2GRAY);
	equalizeHist(frame_gray, frame_gray);

	//-- Detect faces
	upper_body_cascade.detectMultiScale(frame_gray, bodies, 1.1, 2, 0 | CV_HAAR_SCALE_IMAGE, Size(30, 30));

	for (size_t i = 0; i < bodies.size(); i++)
	{
		rectangle(frame, bodies[i], Scalar(255, 0, 255));
	}
	//-- Show what you got
	imshow(window_name, frame);
}